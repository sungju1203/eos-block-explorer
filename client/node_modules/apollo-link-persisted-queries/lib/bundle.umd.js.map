{"version":3,"file":"bundle.umd.js","sources":["index.js"],"sourcesContent":["import { ApolloLink, Observable } from 'apollo-link';\nvar sha256 = require('hash.js/lib/hash/sha/256');\nimport { print } from 'graphql/language/printer';\nexport var VERSION = 1;\nexport var defaultGenerateHash = function (query) {\n    return sha256()\n        .update(print(query))\n        .digest('hex');\n};\nexport var defaultOptions = {\n    generateHash: defaultGenerateHash,\n    disable: function (_a) {\n        var graphQLErrors = _a.graphQLErrors, operation = _a.operation;\n        if (graphQLErrors &&\n            graphQLErrors.some(function (_a) {\n                var message = _a.message;\n                return message === 'PersistedQueryNotSupported';\n            })) {\n            return true;\n        }\n        var response = operation.getContext().response;\n        if (response &&\n            response.status &&\n            (response.status === 400 || response.status === 500)) {\n            return true;\n        }\n        return false;\n    },\n    useGETForHashedQueries: false,\n};\nfunction definitionIsMutation(d) {\n    return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n}\nfunction operationIsQuery(operation) {\n    return !operation.query.definitions.some(definitionIsMutation);\n}\nexport var createPersistedQueryLink = function (options) {\n    if (options === void 0) { options = {}; }\n    var _a = Object.assign({}, defaultOptions, options), generateHash = _a.generateHash, disable = _a.disable, useGETForHashedQueries = _a.useGETForHashedQueries;\n    var supportsPersistedQueries = true;\n    var calculated = new Map();\n    return new ApolloLink(function (operation, forward) {\n        if (!forward) {\n            throw new Error('PersistedQueryLink cannot be the last link in the chain.');\n        }\n        var query = operation.query;\n        var hashError;\n        if (supportsPersistedQueries) {\n            var hash = calculated.get(query);\n            if (!hash) {\n                try {\n                    hash = generateHash(query);\n                    calculated.set(query, hash);\n                }\n                catch (e) {\n                    hashError = e;\n                }\n            }\n            operation.extensions.persistedQuery = {\n                version: VERSION,\n                sha256Hash: hash,\n            };\n        }\n        return new Observable(function (observer) {\n            if (hashError) {\n                observer.error(hashError);\n                return;\n            }\n            var subscription;\n            var retried = false;\n            var originalFetchOptions;\n            var setFetchOptions = false;\n            var retry = function (_a, cb) {\n                var response = _a.response, networkError = _a.networkError;\n                if (!retried && ((response && response.errors) || networkError)) {\n                    retried = true;\n                    var disablePayload = {\n                        response: response,\n                        networkError: networkError,\n                        operation: operation,\n                        graphQLErrors: response ? response.errors : undefined,\n                    };\n                    supportsPersistedQueries = !disable(disablePayload);\n                    if ((response &&\n                        response.errors &&\n                        response.errors.some(function (_a) {\n                            var message = _a.message;\n                            return message === 'PersistedQueryNotFound';\n                        })) ||\n                        !supportsPersistedQueries) {\n                        if (subscription)\n                            subscription.unsubscribe();\n                        operation.setContext({\n                            http: {\n                                includeQuery: true,\n                                includeExtensions: supportsPersistedQueries,\n                            },\n                        });\n                        if (setFetchOptions) {\n                            operation.setContext({ fetchOptions: originalFetchOptions });\n                        }\n                        subscription = forward(operation).subscribe(handler);\n                        return;\n                    }\n                }\n                cb();\n            };\n            var handler = {\n                next: function (response) {\n                    retry({ response: response }, function () { return observer.next(response); });\n                },\n                error: function (networkError) {\n                    retry({ networkError: networkError }, function () { return observer.error(networkError); });\n                },\n                complete: observer.complete.bind(observer),\n            };\n            operation.setContext({\n                http: {\n                    includeQuery: !supportsPersistedQueries,\n                    includeExtensions: supportsPersistedQueries,\n                },\n            });\n            if (useGETForHashedQueries &&\n                supportsPersistedQueries &&\n                operationIsQuery(operation)) {\n                operation.setContext(function (_a) {\n                    var _b = _a.fetchOptions, fetchOptions = _b === void 0 ? {} : _b;\n                    originalFetchOptions = fetchOptions;\n                    return {\n                        fetchOptions: Object.assign({}, fetchOptions, { method: 'GET' }),\n                    };\n                });\n                setFetchOptions = true;\n            }\n            subscription = forward(operation).subscribe(handler);\n            return function () {\n                if (subscription)\n                    subscription.unsubscribe();\n            };\n        });\n    });\n};\n//# sourceMappingURL=index.js.map"],"names":["print","ApolloLink","Observable"],"mappings":"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"}