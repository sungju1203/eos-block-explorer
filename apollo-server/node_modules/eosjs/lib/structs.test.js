'use strict';

/* eslint-env mocha */
var assert = require('assert');
var Fcbuffer = require('fcbuffer');

var Eos = require('.');

describe('shorthand', function () {

  it('asset', function () {
    var eos = Eos.Localnet();
    var types = eos.fc.types;

    var AssetType = types.asset();

    assertSerializer(AssetType, '1.0000 EOS');

    var obj = AssetType.fromObject('1 EOS');
    assert.equal(obj, '1.0000 EOS');

    var obj2 = AssetType.fromObject({ amount: 10000, symbol: 'EOS' });
    assert.equal(obj, '1.0000 EOS');
  });

  it('authority', function () {
    var eos = Eos.Localnet();
    var authority = eos.fc.structs.authority;


    var pubkey = 'EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV';
    var auth = { threshold: 1, keys: [{ key: pubkey, weight: 1 }], accounts: [] };

    assert.deepEqual(authority.fromObject(pubkey), auth);
    assert.deepEqual(authority.fromObject(auth), auth);
  });

  it('PublicKey sorting', function () {
    var eos = Eos.Localnet();
    var authority = eos.fc.structs.authority;


    var pubkeys = ['EOS7wBGPvBgRVa4wQN2zm5CjgBF6S7tP7R3JavtSa2unHUoVQGhey', 'EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV'];

    var authSorted = { threshold: 1, keys: [{ key: pubkeys[1], weight: 1 }, { key: pubkeys[0], weight: 1 }], accounts: [] };

    var authUnsorted = { threshold: 1, keys: [{ key: pubkeys[0], weight: 1 }, { key: pubkeys[1], weight: 1 }], accounts: []

      // assert.deepEqual(authority.fromObject(pubkey), auth)
    };assert.deepEqual(authority.fromObject(authUnsorted), authSorted);
  });

  it('public_key', function () {
    var eos = Eos.Localnet();
    var _eos$fc = eos.fc,
        structs = _eos$fc.structs,
        types = _eos$fc.types;

    var PublicKeyType = types.public_key();
    var pubkey = 'EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV';
    // 02c0ded2bc1f1305fb0faac5e6c03ee3a1924234985427b6167ca569d13df435cf
    assertSerializer(PublicKeyType, pubkey);
  });

  it('asset_symbol', function () {
    var eos = Eos.Localnet();
    var types = eos.fc.types;

    var AssetSymbolType = types.asset_symbol();

    assertSerializer(AssetSymbolType, 'EOS');

    var obj = AssetSymbolType.fromObject('EOS');
    var buf = Fcbuffer.toBuffer(AssetSymbolType, obj);
    assert.equal(buf.toString('hex'), '04454f5300000000');
  });
});

if (process.env['CURRENCY_ABI'] != null) {
  describe('Contract Abi', function () {
    it('Messages do not sort', function _callee() {
      var local, opts, tx;
      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              local = Eos.Localnet();
              opts = { sign: false, broadcast: false };
              _context.next = 4;
              return regeneratorRuntime.awrap(local.transaction(['currency', 'eos'], function (_ref) {
                var currency = _ref.currency,
                    eos = _ref.eos;

                eos.transfer('inita', 'initd', 1, ''); // make sure {code: 'eos', ..} remains first 
                currency.transfer('inita', 'initd', 1); // {code: 'currency', ..} remains second
              }, opts));

            case 4:
              tx = _context.sent;

              assert.equal(tx.transaction.messages[0].code, 'eos');
              assert.equal(tx.transaction.messages[1].code, 'currency');

            case 7:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    });
  });
} else {
  console.log('To run the currency Abi test: deploy the "currency" smart contract, set the CURRENCY_ABI environment variable.');
}

describe('Message.data', function () {
  it('json', function () {
    var eos = Eos.Localnet({ forceMessageDataHex: false });
    var _eos$fc2 = eos.fc,
        structs = _eos$fc2.structs,
        types = _eos$fc2.types;

    var value = {
      code: 'eos',
      type: 'transfer',
      data: {
        from: 'inita',
        to: 'initb',
        amount: '1',
        memo: ''
      },
      authorization: []
    };
    assertSerializer(structs.message, value);
  });

  it('hex', function () {
    var eos = Eos.Localnet({ forceMessageDataHex: false, debug: false });
    var _eos$fc3 = eos.fc,
        structs = _eos$fc3.structs,
        types = _eos$fc3.types;


    var tr = { from: 'inita', to: 'initb', amount: '1', memo: '' };
    var hex = Fcbuffer.toBuffer(structs.transfer, tr).toString('hex');
    // const lenPrefixHex = Number(hex.length / 2).toString(16) + hex.toString('hex')

    var value = {
      code: 'eos',
      type: 'transfer',
      data: hex,
      authorization: []
    };

    var type = structs.message;
    var obj = type.fromObject(value); // tests fromObject
    var buf = Fcbuffer.toBuffer(type, obj); // tests appendByteBuffer
    var obj2 = Fcbuffer.fromBuffer(type, buf); // tests fromByteBuffer
    var obj3 = type.toObject(obj); // tests toObject

    assert.deepEqual(Object.assign({}, value, { data: tr }), obj3, 'serialize object');
    assert.deepEqual(obj3, obj2, 'serialize buffer');
  });

  it('force hex', function () {
    var eos = Eos.Localnet({ forceMessageDataHex: true });
    var _eos$fc4 = eos.fc,
        structs = _eos$fc4.structs,
        types = _eos$fc4.types;

    var value = {
      code: 'eos',
      type: 'transfer',
      data: {
        from: 'inita',
        to: 'initb',
        amount: '1',
        memo: ''
      },
      authorization: []
    };
    var type = structs.message;
    var obj = type.fromObject(value); // tests fromObject
    var buf = Fcbuffer.toBuffer(type, obj); // tests appendByteBuffer
    var obj2 = Fcbuffer.fromBuffer(type, buf); // tests fromByteBuffer
    var obj3 = type.toObject(obj); // tests toObject

    var data = Fcbuffer.toBuffer(structs.transfer, value.data);
    var dataHex = //Number(data.length).toString(16) + 
    data.toString('hex');

    assert.deepEqual(Object.assign({}, value, { data: dataHex }), obj3, 'serialize object');
    assert.deepEqual(obj3, obj2, 'serialize buffer');
  });

  it('unknown type', function () {
    var eos = Eos.Localnet({ forceMessageDataHex: false });
    var _eos$fc5 = eos.fc,
        structs = _eos$fc5.structs,
        types = _eos$fc5.types;

    var value = {
      code: 'eos',
      type: 'mytype',
      data: '030a0b0c',
      authorization: []
    };
    assertSerializer(structs.message, value);
  });
});

function assertSerializer(type, value) {
  var obj = type.fromObject(value); // tests fromObject
  var buf = Fcbuffer.toBuffer(type, obj); // tests appendByteBuffer
  var obj2 = Fcbuffer.fromBuffer(type, buf); // tests fromByteBuffer
  var obj3 = type.toObject(obj); // tests toObject

  assert.deepEqual(value, obj3, 'serialize object');
  assert.deepEqual(obj3, obj2, 'serialize buffer');
}